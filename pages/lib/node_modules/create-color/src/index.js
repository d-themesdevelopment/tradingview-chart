import { hashToHex } from "./hashToHex";
import { hashToHsl } from "./hashToHsl";
import { hashToRgb } from "./hashToRgb";

/**
 * Generate the permanent color from any string, array or object.
 *
 * @param {string || object || array} str The parameter to generate hash
 * @param {object} args - The point generated by the factory.
 * @param {string} [args.format="hex"] - The format of the returned color.
 *
 * @example
 * import createColor from "create-color"
 * const hsl = createColor("canThereBeAnyText", {
 *  format: "hsl"
 * })
 *
 * @name createColor
 */

const createColor = (str, params = { format: "hex" }) => {
  if (str == null) {
    throw new Error(`[X] You didn't specify an input parameter for the hash`);
  }

  const hash = getHash(str);
  const allFormats = {
    hex: () => hashToHex(hash),
    rgb: () => hashToRgb(hash),
    hsl: () => hashToHsl(hash)
  };

  const format = params && params.format;
  const keys = Object.keys(allFormats);
  if (!keys.includes(format)) {
    throw new Error(`
      [X] Unknown format: ${format}. 
      The following formats are available: ${keys}
    `);
  }

  return allFormats[format]();
};

const getHash = str => {
  const s = JSON.stringify(str);
  return s.split("").reduce((a, _, i) => (a += s.charCodeAt(i) + (a << 5)), 0);
};

export default createColor;
